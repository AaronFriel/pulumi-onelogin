// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class SmartHooks extends pulumi.CustomResource {
    /**
     * Get an existing SmartHooks resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SmartHooksState, opts?: pulumi.CustomResourceOptions): SmartHooks {
        return new SmartHooks(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'onelogin:index/smartHooks:SmartHooks';

    /**
     * Returns true if the given object is an instance of SmartHooks.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SmartHooks {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SmartHooks.__pulumiType;
    }

    public readonly conditions!: pulumi.Output<outputs.SmartHooksCondition[] | undefined>;
    public readonly contextVersion!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly disabled!: pulumi.Output<boolean>;
    public readonly envVars!: pulumi.Output<string[]>;
    public readonly function!: pulumi.Output<string>;
    public readonly options!: pulumi.Output<outputs.SmartHooksOptions | undefined>;
    public readonly packages!: pulumi.Output<{[key: string]: string}>;
    public readonly retries!: pulumi.Output<number>;
    public readonly runtime!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly timeout!: pulumi.Output<number>;
    public readonly type!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a SmartHooks resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SmartHooksArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SmartHooksArgs | SmartHooksState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SmartHooksState | undefined;
            inputs["conditions"] = state ? state.conditions : undefined;
            inputs["contextVersion"] = state ? state.contextVersion : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["disabled"] = state ? state.disabled : undefined;
            inputs["envVars"] = state ? state.envVars : undefined;
            inputs["function"] = state ? state.function : undefined;
            inputs["options"] = state ? state.options : undefined;
            inputs["packages"] = state ? state.packages : undefined;
            inputs["retries"] = state ? state.retries : undefined;
            inputs["runtime"] = state ? state.runtime : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["timeout"] = state ? state.timeout : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as SmartHooksArgs | undefined;
            if ((!args || args.disabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'disabled'");
            }
            if ((!args || args.envVars === undefined) && !opts.urn) {
                throw new Error("Missing required property 'envVars'");
            }
            if ((!args || args.function === undefined) && !opts.urn) {
                throw new Error("Missing required property 'function'");
            }
            if ((!args || args.packages === undefined) && !opts.urn) {
                throw new Error("Missing required property 'packages'");
            }
            if ((!args || args.retries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'retries'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            if ((!args || args.timeout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeout'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["conditions"] = args ? args.conditions : undefined;
            inputs["contextVersion"] = args ? args.contextVersion : undefined;
            inputs["disabled"] = args ? args.disabled : undefined;
            inputs["envVars"] = args ? args.envVars : undefined;
            inputs["function"] = args ? args.function : undefined;
            inputs["options"] = args ? args.options : undefined;
            inputs["packages"] = args ? args.packages : undefined;
            inputs["retries"] = args ? args.retries : undefined;
            inputs["runtime"] = args ? args.runtime : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["updatedAt"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(SmartHooks.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SmartHooks resources.
 */
export interface SmartHooksState {
    conditions?: pulumi.Input<pulumi.Input<inputs.SmartHooksCondition>[]>;
    contextVersion?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    disabled?: pulumi.Input<boolean>;
    envVars?: pulumi.Input<pulumi.Input<string>[]>;
    function?: pulumi.Input<string>;
    options?: pulumi.Input<inputs.SmartHooksOptions>;
    packages?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    retries?: pulumi.Input<number>;
    runtime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SmartHooks resource.
 */
export interface SmartHooksArgs {
    conditions?: pulumi.Input<pulumi.Input<inputs.SmartHooksCondition>[]>;
    contextVersion?: pulumi.Input<string>;
    disabled: pulumi.Input<boolean>;
    envVars: pulumi.Input<pulumi.Input<string>[]>;
    function: pulumi.Input<string>;
    options?: pulumi.Input<inputs.SmartHooksOptions>;
    packages: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    retries: pulumi.Input<number>;
    runtime: pulumi.Input<string>;
    timeout: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

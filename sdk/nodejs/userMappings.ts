// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class UserMappings extends pulumi.CustomResource {
    /**
     * Get an existing UserMappings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserMappingsState, opts?: pulumi.CustomResourceOptions): UserMappings {
        return new UserMappings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'onelogin:index/userMappings:UserMappings';

    /**
     * Returns true if the given object is an instance of UserMappings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserMappings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserMappings.__pulumiType;
    }

    public readonly actions!: pulumi.Output<outputs.UserMappingsAction[] | undefined>;
    public readonly conditions!: pulumi.Output<outputs.UserMappingsCondition[] | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly match!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly position!: pulumi.Output<number>;

    /**
     * Create a UserMappings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserMappingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserMappingsArgs | UserMappingsState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserMappingsState | undefined;
            inputs["actions"] = state ? state.actions : undefined;
            inputs["conditions"] = state ? state.conditions : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["match"] = state ? state.match : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["position"] = state ? state.position : undefined;
        } else {
            const args = argsOrState as UserMappingsArgs | undefined;
            if ((!args || args.match === undefined) && !opts.urn) {
                throw new Error("Missing required property 'match'");
            }
            if ((!args || args.position === undefined) && !opts.urn) {
                throw new Error("Missing required property 'position'");
            }
            inputs["actions"] = args ? args.actions : undefined;
            inputs["conditions"] = args ? args.conditions : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["match"] = args ? args.match : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["position"] = args ? args.position : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(UserMappings.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserMappings resources.
 */
export interface UserMappingsState {
    actions?: pulumi.Input<pulumi.Input<inputs.UserMappingsAction>[]>;
    conditions?: pulumi.Input<pulumi.Input<inputs.UserMappingsCondition>[]>;
    enabled?: pulumi.Input<boolean>;
    match?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    position?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a UserMappings resource.
 */
export interface UserMappingsArgs {
    actions?: pulumi.Input<pulumi.Input<inputs.UserMappingsAction>[]>;
    conditions?: pulumi.Input<pulumi.Input<inputs.UserMappingsCondition>[]>;
    enabled?: pulumi.Input<boolean>;
    match: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    position: pulumi.Input<number>;
}

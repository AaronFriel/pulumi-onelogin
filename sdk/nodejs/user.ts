// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'onelogin:index/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    public readonly comment!: pulumi.Output<string | undefined>;
    public readonly company!: pulumi.Output<string | undefined>;
    public readonly customAttributes!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly department!: pulumi.Output<string | undefined>;
    public readonly directoryId!: pulumi.Output<number>;
    public readonly distinguishedName!: pulumi.Output<string | undefined>;
    public readonly email!: pulumi.Output<string>;
    public readonly externalId!: pulumi.Output<number>;
    public readonly firstname!: pulumi.Output<string | undefined>;
    public readonly groupId!: pulumi.Output<number>;
    public readonly lastname!: pulumi.Output<string | undefined>;
    public readonly managerAdId!: pulumi.Output<number>;
    public readonly managerUserId!: pulumi.Output<number>;
    public readonly memberOf!: pulumi.Output<string | undefined>;
    public readonly phone!: pulumi.Output<string | undefined>;
    public readonly samaccountname!: pulumi.Output<string | undefined>;
    public readonly state!: pulumi.Output<number>;
    public readonly status!: pulumi.Output<number>;
    public readonly title!: pulumi.Output<string | undefined>;
    public readonly trustedIdpId!: pulumi.Output<number>;
    public readonly username!: pulumi.Output<string>;
    public readonly userprincipalname!: pulumi.Output<string | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            inputs["comment"] = state ? state.comment : undefined;
            inputs["company"] = state ? state.company : undefined;
            inputs["customAttributes"] = state ? state.customAttributes : undefined;
            inputs["department"] = state ? state.department : undefined;
            inputs["directoryId"] = state ? state.directoryId : undefined;
            inputs["distinguishedName"] = state ? state.distinguishedName : undefined;
            inputs["email"] = state ? state.email : undefined;
            inputs["externalId"] = state ? state.externalId : undefined;
            inputs["firstname"] = state ? state.firstname : undefined;
            inputs["groupId"] = state ? state.groupId : undefined;
            inputs["lastname"] = state ? state.lastname : undefined;
            inputs["managerAdId"] = state ? state.managerAdId : undefined;
            inputs["managerUserId"] = state ? state.managerUserId : undefined;
            inputs["memberOf"] = state ? state.memberOf : undefined;
            inputs["phone"] = state ? state.phone : undefined;
            inputs["samaccountname"] = state ? state.samaccountname : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["title"] = state ? state.title : undefined;
            inputs["trustedIdpId"] = state ? state.trustedIdpId : undefined;
            inputs["username"] = state ? state.username : undefined;
            inputs["userprincipalname"] = state ? state.userprincipalname : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            inputs["comment"] = args ? args.comment : undefined;
            inputs["company"] = args ? args.company : undefined;
            inputs["customAttributes"] = args ? args.customAttributes : undefined;
            inputs["department"] = args ? args.department : undefined;
            inputs["directoryId"] = args ? args.directoryId : undefined;
            inputs["distinguishedName"] = args ? args.distinguishedName : undefined;
            inputs["email"] = args ? args.email : undefined;
            inputs["externalId"] = args ? args.externalId : undefined;
            inputs["firstname"] = args ? args.firstname : undefined;
            inputs["groupId"] = args ? args.groupId : undefined;
            inputs["lastname"] = args ? args.lastname : undefined;
            inputs["managerAdId"] = args ? args.managerAdId : undefined;
            inputs["managerUserId"] = args ? args.managerUserId : undefined;
            inputs["memberOf"] = args ? args.memberOf : undefined;
            inputs["phone"] = args ? args.phone : undefined;
            inputs["samaccountname"] = args ? args.samaccountname : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["title"] = args ? args.title : undefined;
            inputs["trustedIdpId"] = args ? args.trustedIdpId : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["userprincipalname"] = args ? args.userprincipalname : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(User.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    comment?: pulumi.Input<string>;
    company?: pulumi.Input<string>;
    customAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    department?: pulumi.Input<string>;
    directoryId?: pulumi.Input<number>;
    distinguishedName?: pulumi.Input<string>;
    email?: pulumi.Input<string>;
    externalId?: pulumi.Input<number>;
    firstname?: pulumi.Input<string>;
    groupId?: pulumi.Input<number>;
    lastname?: pulumi.Input<string>;
    managerAdId?: pulumi.Input<number>;
    managerUserId?: pulumi.Input<number>;
    memberOf?: pulumi.Input<string>;
    phone?: pulumi.Input<string>;
    samaccountname?: pulumi.Input<string>;
    state?: pulumi.Input<number>;
    status?: pulumi.Input<number>;
    title?: pulumi.Input<string>;
    trustedIdpId?: pulumi.Input<number>;
    username?: pulumi.Input<string>;
    userprincipalname?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    comment?: pulumi.Input<string>;
    company?: pulumi.Input<string>;
    customAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    department?: pulumi.Input<string>;
    directoryId?: pulumi.Input<number>;
    distinguishedName?: pulumi.Input<string>;
    email: pulumi.Input<string>;
    externalId?: pulumi.Input<number>;
    firstname?: pulumi.Input<string>;
    groupId?: pulumi.Input<number>;
    lastname?: pulumi.Input<string>;
    managerAdId?: pulumi.Input<number>;
    managerUserId?: pulumi.Input<number>;
    memberOf?: pulumi.Input<string>;
    phone?: pulumi.Input<string>;
    samaccountname?: pulumi.Input<string>;
    state?: pulumi.Input<number>;
    status?: pulumi.Input<number>;
    title?: pulumi.Input<string>;
    trustedIdpId?: pulumi.Input<number>;
    username: pulumi.Input<string>;
    userprincipalname?: pulumi.Input<string>;
}

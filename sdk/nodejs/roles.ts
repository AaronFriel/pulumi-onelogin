// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Roles extends pulumi.CustomResource {
    /**
     * Get an existing Roles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RolesState, opts?: pulumi.CustomResourceOptions): Roles {
        return new Roles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'onelogin:index/roles:Roles';

    /**
     * Returns true if the given object is an instance of Roles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Roles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Roles.__pulumiType;
    }

    public readonly admins!: pulumi.Output<number[] | undefined>;
    public readonly apps!: pulumi.Output<number[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly users!: pulumi.Output<number[] | undefined>;

    /**
     * Create a Roles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RolesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RolesArgs | RolesState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RolesState | undefined;
            inputs["admins"] = state ? state.admins : undefined;
            inputs["apps"] = state ? state.apps : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as RolesArgs | undefined;
            inputs["admins"] = args ? args.admins : undefined;
            inputs["apps"] = args ? args.apps : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["users"] = args ? args.users : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Roles.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Roles resources.
 */
export interface RolesState {
    admins?: pulumi.Input<pulumi.Input<number>[]>;
    apps?: pulumi.Input<pulumi.Input<number>[]>;
    name?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a Roles resource.
 */
export interface RolesArgs {
    admins?: pulumi.Input<pulumi.Input<number>[]>;
    apps?: pulumi.Input<pulumi.Input<number>[]>;
    name?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<number>[]>;
}

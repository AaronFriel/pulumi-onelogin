// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Users struct {
	pulumi.CustomResourceState

	Comment           pulumi.StringPtrOutput `pulumi:"comment"`
	Company           pulumi.StringPtrOutput `pulumi:"company"`
	CustomAttributes  pulumi.StringMapOutput `pulumi:"customAttributes"`
	Department        pulumi.StringPtrOutput `pulumi:"department"`
	DirectoryId       pulumi.IntOutput       `pulumi:"directoryId"`
	DistinguishedName pulumi.StringPtrOutput `pulumi:"distinguishedName"`
	Email             pulumi.StringOutput    `pulumi:"email"`
	ExternalId        pulumi.IntOutput       `pulumi:"externalId"`
	Firstname         pulumi.StringPtrOutput `pulumi:"firstname"`
	GroupId           pulumi.IntOutput       `pulumi:"groupId"`
	Lastname          pulumi.StringPtrOutput `pulumi:"lastname"`
	ManagerAdId       pulumi.IntOutput       `pulumi:"managerAdId"`
	ManagerUserId     pulumi.IntOutput       `pulumi:"managerUserId"`
	MemberOf          pulumi.StringPtrOutput `pulumi:"memberOf"`
	Phone             pulumi.StringPtrOutput `pulumi:"phone"`
	Samaccountname    pulumi.StringPtrOutput `pulumi:"samaccountname"`
	State             pulumi.IntOutput       `pulumi:"state"`
	Status            pulumi.IntOutput       `pulumi:"status"`
	Title             pulumi.StringPtrOutput `pulumi:"title"`
	TrustedIdpId      pulumi.IntOutput       `pulumi:"trustedIdpId"`
	Username          pulumi.StringOutput    `pulumi:"username"`
	Userprincipalname pulumi.StringPtrOutput `pulumi:"userprincipalname"`
}

// NewUsers registers a new resource with the given unique name, arguments, and options.
func NewUsers(ctx *pulumi.Context,
	name string, args *UsersArgs, opts ...pulumi.ResourceOption) (*Users, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource Users
	err := ctx.RegisterResource("onelogin:index/users:Users", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsers gets an existing Users resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsersState, opts ...pulumi.ResourceOption) (*Users, error) {
	var resource Users
	err := ctx.ReadResource("onelogin:index/users:Users", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Users resources.
type usersState struct {
	Comment           *string           `pulumi:"comment"`
	Company           *string           `pulumi:"company"`
	CustomAttributes  map[string]string `pulumi:"customAttributes"`
	Department        *string           `pulumi:"department"`
	DirectoryId       *int              `pulumi:"directoryId"`
	DistinguishedName *string           `pulumi:"distinguishedName"`
	Email             *string           `pulumi:"email"`
	ExternalId        *int              `pulumi:"externalId"`
	Firstname         *string           `pulumi:"firstname"`
	GroupId           *int              `pulumi:"groupId"`
	Lastname          *string           `pulumi:"lastname"`
	ManagerAdId       *int              `pulumi:"managerAdId"`
	ManagerUserId     *int              `pulumi:"managerUserId"`
	MemberOf          *string           `pulumi:"memberOf"`
	Phone             *string           `pulumi:"phone"`
	Samaccountname    *string           `pulumi:"samaccountname"`
	State             *int              `pulumi:"state"`
	Status            *int              `pulumi:"status"`
	Title             *string           `pulumi:"title"`
	TrustedIdpId      *int              `pulumi:"trustedIdpId"`
	Username          *string           `pulumi:"username"`
	Userprincipalname *string           `pulumi:"userprincipalname"`
}

type UsersState struct {
	Comment           pulumi.StringPtrInput
	Company           pulumi.StringPtrInput
	CustomAttributes  pulumi.StringMapInput
	Department        pulumi.StringPtrInput
	DirectoryId       pulumi.IntPtrInput
	DistinguishedName pulumi.StringPtrInput
	Email             pulumi.StringPtrInput
	ExternalId        pulumi.IntPtrInput
	Firstname         pulumi.StringPtrInput
	GroupId           pulumi.IntPtrInput
	Lastname          pulumi.StringPtrInput
	ManagerAdId       pulumi.IntPtrInput
	ManagerUserId     pulumi.IntPtrInput
	MemberOf          pulumi.StringPtrInput
	Phone             pulumi.StringPtrInput
	Samaccountname    pulumi.StringPtrInput
	State             pulumi.IntPtrInput
	Status            pulumi.IntPtrInput
	Title             pulumi.StringPtrInput
	TrustedIdpId      pulumi.IntPtrInput
	Username          pulumi.StringPtrInput
	Userprincipalname pulumi.StringPtrInput
}

func (UsersState) ElementType() reflect.Type {
	return reflect.TypeOf((*usersState)(nil)).Elem()
}

type usersArgs struct {
	Comment           *string           `pulumi:"comment"`
	Company           *string           `pulumi:"company"`
	CustomAttributes  map[string]string `pulumi:"customAttributes"`
	Department        *string           `pulumi:"department"`
	DirectoryId       *int              `pulumi:"directoryId"`
	DistinguishedName *string           `pulumi:"distinguishedName"`
	Email             string            `pulumi:"email"`
	ExternalId        *int              `pulumi:"externalId"`
	Firstname         *string           `pulumi:"firstname"`
	GroupId           *int              `pulumi:"groupId"`
	Lastname          *string           `pulumi:"lastname"`
	ManagerAdId       *int              `pulumi:"managerAdId"`
	ManagerUserId     *int              `pulumi:"managerUserId"`
	MemberOf          *string           `pulumi:"memberOf"`
	Phone             *string           `pulumi:"phone"`
	Samaccountname    *string           `pulumi:"samaccountname"`
	State             *int              `pulumi:"state"`
	Status            *int              `pulumi:"status"`
	Title             *string           `pulumi:"title"`
	TrustedIdpId      *int              `pulumi:"trustedIdpId"`
	Username          string            `pulumi:"username"`
	Userprincipalname *string           `pulumi:"userprincipalname"`
}

// The set of arguments for constructing a Users resource.
type UsersArgs struct {
	Comment           pulumi.StringPtrInput
	Company           pulumi.StringPtrInput
	CustomAttributes  pulumi.StringMapInput
	Department        pulumi.StringPtrInput
	DirectoryId       pulumi.IntPtrInput
	DistinguishedName pulumi.StringPtrInput
	Email             pulumi.StringInput
	ExternalId        pulumi.IntPtrInput
	Firstname         pulumi.StringPtrInput
	GroupId           pulumi.IntPtrInput
	Lastname          pulumi.StringPtrInput
	ManagerAdId       pulumi.IntPtrInput
	ManagerUserId     pulumi.IntPtrInput
	MemberOf          pulumi.StringPtrInput
	Phone             pulumi.StringPtrInput
	Samaccountname    pulumi.StringPtrInput
	State             pulumi.IntPtrInput
	Status            pulumi.IntPtrInput
	Title             pulumi.StringPtrInput
	TrustedIdpId      pulumi.IntPtrInput
	Username          pulumi.StringInput
	Userprincipalname pulumi.StringPtrInput
}

func (UsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usersArgs)(nil)).Elem()
}

type UsersInput interface {
	pulumi.Input

	ToUsersOutput() UsersOutput
	ToUsersOutputWithContext(ctx context.Context) UsersOutput
}

func (*Users) ElementType() reflect.Type {
	return reflect.TypeOf((*Users)(nil))
}

func (i *Users) ToUsersOutput() UsersOutput {
	return i.ToUsersOutputWithContext(context.Background())
}

func (i *Users) ToUsersOutputWithContext(ctx context.Context) UsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersOutput)
}

func (i *Users) ToUsersPtrOutput() UsersPtrOutput {
	return i.ToUsersPtrOutputWithContext(context.Background())
}

func (i *Users) ToUsersPtrOutputWithContext(ctx context.Context) UsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPtrOutput)
}

type UsersPtrInput interface {
	pulumi.Input

	ToUsersPtrOutput() UsersPtrOutput
	ToUsersPtrOutputWithContext(ctx context.Context) UsersPtrOutput
}

type usersPtrType UsersArgs

func (*usersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Users)(nil))
}

func (i *usersPtrType) ToUsersPtrOutput() UsersPtrOutput {
	return i.ToUsersPtrOutputWithContext(context.Background())
}

func (i *usersPtrType) ToUsersPtrOutputWithContext(ctx context.Context) UsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersPtrOutput)
}

// UsersArrayInput is an input type that accepts UsersArray and UsersArrayOutput values.
// You can construct a concrete instance of `UsersArrayInput` via:
//
//          UsersArray{ UsersArgs{...} }
type UsersArrayInput interface {
	pulumi.Input

	ToUsersArrayOutput() UsersArrayOutput
	ToUsersArrayOutputWithContext(context.Context) UsersArrayOutput
}

type UsersArray []UsersInput

func (UsersArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Users)(nil))
}

func (i UsersArray) ToUsersArrayOutput() UsersArrayOutput {
	return i.ToUsersArrayOutputWithContext(context.Background())
}

func (i UsersArray) ToUsersArrayOutputWithContext(ctx context.Context) UsersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersArrayOutput)
}

// UsersMapInput is an input type that accepts UsersMap and UsersMapOutput values.
// You can construct a concrete instance of `UsersMapInput` via:
//
//          UsersMap{ "key": UsersArgs{...} }
type UsersMapInput interface {
	pulumi.Input

	ToUsersMapOutput() UsersMapOutput
	ToUsersMapOutputWithContext(context.Context) UsersMapOutput
}

type UsersMap map[string]UsersInput

func (UsersMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Users)(nil))
}

func (i UsersMap) ToUsersMapOutput() UsersMapOutput {
	return i.ToUsersMapOutputWithContext(context.Background())
}

func (i UsersMap) ToUsersMapOutputWithContext(ctx context.Context) UsersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersMapOutput)
}

type UsersOutput struct {
	*pulumi.OutputState
}

func (UsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Users)(nil))
}

func (o UsersOutput) ToUsersOutput() UsersOutput {
	return o
}

func (o UsersOutput) ToUsersOutputWithContext(ctx context.Context) UsersOutput {
	return o
}

func (o UsersOutput) ToUsersPtrOutput() UsersPtrOutput {
	return o.ToUsersPtrOutputWithContext(context.Background())
}

func (o UsersOutput) ToUsersPtrOutputWithContext(ctx context.Context) UsersPtrOutput {
	return o.ApplyT(func(v Users) *Users {
		return &v
	}).(UsersPtrOutput)
}

type UsersPtrOutput struct {
	*pulumi.OutputState
}

func (UsersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Users)(nil))
}

func (o UsersPtrOutput) ToUsersPtrOutput() UsersPtrOutput {
	return o
}

func (o UsersPtrOutput) ToUsersPtrOutputWithContext(ctx context.Context) UsersPtrOutput {
	return o
}

type UsersArrayOutput struct{ *pulumi.OutputState }

func (UsersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Users)(nil))
}

func (o UsersArrayOutput) ToUsersArrayOutput() UsersArrayOutput {
	return o
}

func (o UsersArrayOutput) ToUsersArrayOutputWithContext(ctx context.Context) UsersArrayOutput {
	return o
}

func (o UsersArrayOutput) Index(i pulumi.IntInput) UsersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Users {
		return vs[0].([]Users)[vs[1].(int)]
	}).(UsersOutput)
}

type UsersMapOutput struct{ *pulumi.OutputState }

func (UsersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Users)(nil))
}

func (o UsersMapOutput) ToUsersMapOutput() UsersMapOutput {
	return o
}

func (o UsersMapOutput) ToUsersMapOutputWithContext(ctx context.Context) UsersMapOutput {
	return o
}

func (o UsersMapOutput) MapIndex(k pulumi.StringInput) UsersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Users {
		return vs[0].(map[string]Users)[vs[1].(string)]
	}).(UsersOutput)
}

func init() {
	pulumi.RegisterOutputType(UsersOutput{})
	pulumi.RegisterOutputType(UsersPtrOutput{})
	pulumi.RegisterOutputType(UsersArrayOutput{})
	pulumi.RegisterOutputType(UsersMapOutput{})
}

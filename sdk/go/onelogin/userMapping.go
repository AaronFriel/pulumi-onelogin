// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserMapping struct {
	pulumi.CustomResourceState

	Actions    UserMappingActionArrayOutput    `pulumi:"actions"`
	Conditions UserMappingConditionArrayOutput `pulumi:"conditions"`
	Enabled    pulumi.BoolPtrOutput            `pulumi:"enabled"`
	Match      pulumi.StringOutput             `pulumi:"match"`
	Name       pulumi.StringOutput             `pulumi:"name"`
	Position   pulumi.IntOutput                `pulumi:"position"`
}

// NewUserMapping registers a new resource with the given unique name, arguments, and options.
func NewUserMapping(ctx *pulumi.Context,
	name string, args *UserMappingArgs, opts ...pulumi.ResourceOption) (*UserMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	if args.Position == nil {
		return nil, errors.New("invalid value for required argument 'Position'")
	}
	var resource UserMapping
	err := ctx.RegisterResource("onelogin:index/userMapping:UserMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserMapping gets an existing UserMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserMappingState, opts ...pulumi.ResourceOption) (*UserMapping, error) {
	var resource UserMapping
	err := ctx.ReadResource("onelogin:index/userMapping:UserMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserMapping resources.
type userMappingState struct {
	Actions    []UserMappingAction    `pulumi:"actions"`
	Conditions []UserMappingCondition `pulumi:"conditions"`
	Enabled    *bool                  `pulumi:"enabled"`
	Match      *string                `pulumi:"match"`
	Name       *string                `pulumi:"name"`
	Position   *int                   `pulumi:"position"`
}

type UserMappingState struct {
	Actions    UserMappingActionArrayInput
	Conditions UserMappingConditionArrayInput
	Enabled    pulumi.BoolPtrInput
	Match      pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	Position   pulumi.IntPtrInput
}

func (UserMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*userMappingState)(nil)).Elem()
}

type userMappingArgs struct {
	Actions    []UserMappingAction    `pulumi:"actions"`
	Conditions []UserMappingCondition `pulumi:"conditions"`
	Enabled    *bool                  `pulumi:"enabled"`
	Match      string                 `pulumi:"match"`
	Name       *string                `pulumi:"name"`
	Position   int                    `pulumi:"position"`
}

// The set of arguments for constructing a UserMapping resource.
type UserMappingArgs struct {
	Actions    UserMappingActionArrayInput
	Conditions UserMappingConditionArrayInput
	Enabled    pulumi.BoolPtrInput
	Match      pulumi.StringInput
	Name       pulumi.StringPtrInput
	Position   pulumi.IntInput
}

func (UserMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userMappingArgs)(nil)).Elem()
}

type UserMappingInput interface {
	pulumi.Input

	ToUserMappingOutput() UserMappingOutput
	ToUserMappingOutputWithContext(ctx context.Context) UserMappingOutput
}

func (*UserMapping) ElementType() reflect.Type {
	return reflect.TypeOf((*UserMapping)(nil))
}

func (i *UserMapping) ToUserMappingOutput() UserMappingOutput {
	return i.ToUserMappingOutputWithContext(context.Background())
}

func (i *UserMapping) ToUserMappingOutputWithContext(ctx context.Context) UserMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMappingOutput)
}

func (i *UserMapping) ToUserMappingPtrOutput() UserMappingPtrOutput {
	return i.ToUserMappingPtrOutputWithContext(context.Background())
}

func (i *UserMapping) ToUserMappingPtrOutputWithContext(ctx context.Context) UserMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMappingPtrOutput)
}

type UserMappingPtrInput interface {
	pulumi.Input

	ToUserMappingPtrOutput() UserMappingPtrOutput
	ToUserMappingPtrOutputWithContext(ctx context.Context) UserMappingPtrOutput
}

type userMappingPtrType UserMappingArgs

func (*userMappingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserMapping)(nil))
}

func (i *userMappingPtrType) ToUserMappingPtrOutput() UserMappingPtrOutput {
	return i.ToUserMappingPtrOutputWithContext(context.Background())
}

func (i *userMappingPtrType) ToUserMappingPtrOutputWithContext(ctx context.Context) UserMappingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMappingPtrOutput)
}

// UserMappingArrayInput is an input type that accepts UserMappingArray and UserMappingArrayOutput values.
// You can construct a concrete instance of `UserMappingArrayInput` via:
//
//          UserMappingArray{ UserMappingArgs{...} }
type UserMappingArrayInput interface {
	pulumi.Input

	ToUserMappingArrayOutput() UserMappingArrayOutput
	ToUserMappingArrayOutputWithContext(context.Context) UserMappingArrayOutput
}

type UserMappingArray []UserMappingInput

func (UserMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*UserMapping)(nil))
}

func (i UserMappingArray) ToUserMappingArrayOutput() UserMappingArrayOutput {
	return i.ToUserMappingArrayOutputWithContext(context.Background())
}

func (i UserMappingArray) ToUserMappingArrayOutputWithContext(ctx context.Context) UserMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMappingArrayOutput)
}

// UserMappingMapInput is an input type that accepts UserMappingMap and UserMappingMapOutput values.
// You can construct a concrete instance of `UserMappingMapInput` via:
//
//          UserMappingMap{ "key": UserMappingArgs{...} }
type UserMappingMapInput interface {
	pulumi.Input

	ToUserMappingMapOutput() UserMappingMapOutput
	ToUserMappingMapOutputWithContext(context.Context) UserMappingMapOutput
}

type UserMappingMap map[string]UserMappingInput

func (UserMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*UserMapping)(nil))
}

func (i UserMappingMap) ToUserMappingMapOutput() UserMappingMapOutput {
	return i.ToUserMappingMapOutputWithContext(context.Background())
}

func (i UserMappingMap) ToUserMappingMapOutputWithContext(ctx context.Context) UserMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMappingMapOutput)
}

type UserMappingOutput struct {
	*pulumi.OutputState
}

func (UserMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserMapping)(nil))
}

func (o UserMappingOutput) ToUserMappingOutput() UserMappingOutput {
	return o
}

func (o UserMappingOutput) ToUserMappingOutputWithContext(ctx context.Context) UserMappingOutput {
	return o
}

func (o UserMappingOutput) ToUserMappingPtrOutput() UserMappingPtrOutput {
	return o.ToUserMappingPtrOutputWithContext(context.Background())
}

func (o UserMappingOutput) ToUserMappingPtrOutputWithContext(ctx context.Context) UserMappingPtrOutput {
	return o.ApplyT(func(v UserMapping) *UserMapping {
		return &v
	}).(UserMappingPtrOutput)
}

type UserMappingPtrOutput struct {
	*pulumi.OutputState
}

func (UserMappingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserMapping)(nil))
}

func (o UserMappingPtrOutput) ToUserMappingPtrOutput() UserMappingPtrOutput {
	return o
}

func (o UserMappingPtrOutput) ToUserMappingPtrOutputWithContext(ctx context.Context) UserMappingPtrOutput {
	return o
}

type UserMappingArrayOutput struct{ *pulumi.OutputState }

func (UserMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserMapping)(nil))
}

func (o UserMappingArrayOutput) ToUserMappingArrayOutput() UserMappingArrayOutput {
	return o
}

func (o UserMappingArrayOutput) ToUserMappingArrayOutputWithContext(ctx context.Context) UserMappingArrayOutput {
	return o
}

func (o UserMappingArrayOutput) Index(i pulumi.IntInput) UserMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserMapping {
		return vs[0].([]UserMapping)[vs[1].(int)]
	}).(UserMappingOutput)
}

type UserMappingMapOutput struct{ *pulumi.OutputState }

func (UserMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]UserMapping)(nil))
}

func (o UserMappingMapOutput) ToUserMappingMapOutput() UserMappingMapOutput {
	return o
}

func (o UserMappingMapOutput) ToUserMappingMapOutputWithContext(ctx context.Context) UserMappingMapOutput {
	return o
}

func (o UserMappingMapOutput) MapIndex(k pulumi.StringInput) UserMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) UserMapping {
		return vs[0].(map[string]UserMapping)[vs[1].(string)]
	}).(UserMappingOutput)
}

func init() {
	pulumi.RegisterOutputType(UserMappingOutput{})
	pulumi.RegisterOutputType(UserMappingPtrOutput{})
	pulumi.RegisterOutputType(UserMappingArrayOutput{})
	pulumi.RegisterOutputType(UserMappingMapOutput{})
}

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Privileges struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput         `pulumi:"description"`
	Name        pulumi.StringOutput            `pulumi:"name"`
	Privileges  PrivilegesPrivilegeArrayOutput `pulumi:"privileges"`
	RoleIds     pulumi.IntArrayOutput          `pulumi:"roleIds"`
	UserIds     pulumi.IntArrayOutput          `pulumi:"userIds"`
}

// NewPrivileges registers a new resource with the given unique name, arguments, and options.
func NewPrivileges(ctx *pulumi.Context,
	name string, args *PrivilegesArgs, opts ...pulumi.ResourceOption) (*Privileges, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Privileges == nil {
		return nil, errors.New("invalid value for required argument 'Privileges'")
	}
	var resource Privileges
	err := ctx.RegisterResource("onelogin:index/privileges:Privileges", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivileges gets an existing Privileges resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivileges(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivilegesState, opts ...pulumi.ResourceOption) (*Privileges, error) {
	var resource Privileges
	err := ctx.ReadResource("onelogin:index/privileges:Privileges", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Privileges resources.
type privilegesState struct {
	Description *string               `pulumi:"description"`
	Name        *string               `pulumi:"name"`
	Privileges  []PrivilegesPrivilege `pulumi:"privileges"`
	RoleIds     []int                 `pulumi:"roleIds"`
	UserIds     []int                 `pulumi:"userIds"`
}

type PrivilegesState struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Privileges  PrivilegesPrivilegeArrayInput
	RoleIds     pulumi.IntArrayInput
	UserIds     pulumi.IntArrayInput
}

func (PrivilegesState) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegesState)(nil)).Elem()
}

type privilegesArgs struct {
	Description *string               `pulumi:"description"`
	Name        *string               `pulumi:"name"`
	Privileges  []PrivilegesPrivilege `pulumi:"privileges"`
	RoleIds     []int                 `pulumi:"roleIds"`
	UserIds     []int                 `pulumi:"userIds"`
}

// The set of arguments for constructing a Privileges resource.
type PrivilegesArgs struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Privileges  PrivilegesPrivilegeArrayInput
	RoleIds     pulumi.IntArrayInput
	UserIds     pulumi.IntArrayInput
}

func (PrivilegesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegesArgs)(nil)).Elem()
}

type PrivilegesInput interface {
	pulumi.Input

	ToPrivilegesOutput() PrivilegesOutput
	ToPrivilegesOutputWithContext(ctx context.Context) PrivilegesOutput
}

func (*Privileges) ElementType() reflect.Type {
	return reflect.TypeOf((*Privileges)(nil))
}

func (i *Privileges) ToPrivilegesOutput() PrivilegesOutput {
	return i.ToPrivilegesOutputWithContext(context.Background())
}

func (i *Privileges) ToPrivilegesOutputWithContext(ctx context.Context) PrivilegesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegesOutput)
}

func (i *Privileges) ToPrivilegesPtrOutput() PrivilegesPtrOutput {
	return i.ToPrivilegesPtrOutputWithContext(context.Background())
}

func (i *Privileges) ToPrivilegesPtrOutputWithContext(ctx context.Context) PrivilegesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegesPtrOutput)
}

type PrivilegesPtrInput interface {
	pulumi.Input

	ToPrivilegesPtrOutput() PrivilegesPtrOutput
	ToPrivilegesPtrOutputWithContext(ctx context.Context) PrivilegesPtrOutput
}

type privilegesPtrType PrivilegesArgs

func (*privilegesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Privileges)(nil))
}

func (i *privilegesPtrType) ToPrivilegesPtrOutput() PrivilegesPtrOutput {
	return i.ToPrivilegesPtrOutputWithContext(context.Background())
}

func (i *privilegesPtrType) ToPrivilegesPtrOutputWithContext(ctx context.Context) PrivilegesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegesPtrOutput)
}

// PrivilegesArrayInput is an input type that accepts PrivilegesArray and PrivilegesArrayOutput values.
// You can construct a concrete instance of `PrivilegesArrayInput` via:
//
//          PrivilegesArray{ PrivilegesArgs{...} }
type PrivilegesArrayInput interface {
	pulumi.Input

	ToPrivilegesArrayOutput() PrivilegesArrayOutput
	ToPrivilegesArrayOutputWithContext(context.Context) PrivilegesArrayOutput
}

type PrivilegesArray []PrivilegesInput

func (PrivilegesArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Privileges)(nil))
}

func (i PrivilegesArray) ToPrivilegesArrayOutput() PrivilegesArrayOutput {
	return i.ToPrivilegesArrayOutputWithContext(context.Background())
}

func (i PrivilegesArray) ToPrivilegesArrayOutputWithContext(ctx context.Context) PrivilegesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegesArrayOutput)
}

// PrivilegesMapInput is an input type that accepts PrivilegesMap and PrivilegesMapOutput values.
// You can construct a concrete instance of `PrivilegesMapInput` via:
//
//          PrivilegesMap{ "key": PrivilegesArgs{...} }
type PrivilegesMapInput interface {
	pulumi.Input

	ToPrivilegesMapOutput() PrivilegesMapOutput
	ToPrivilegesMapOutputWithContext(context.Context) PrivilegesMapOutput
}

type PrivilegesMap map[string]PrivilegesInput

func (PrivilegesMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Privileges)(nil))
}

func (i PrivilegesMap) ToPrivilegesMapOutput() PrivilegesMapOutput {
	return i.ToPrivilegesMapOutputWithContext(context.Background())
}

func (i PrivilegesMap) ToPrivilegesMapOutputWithContext(ctx context.Context) PrivilegesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegesMapOutput)
}

type PrivilegesOutput struct {
	*pulumi.OutputState
}

func (PrivilegesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Privileges)(nil))
}

func (o PrivilegesOutput) ToPrivilegesOutput() PrivilegesOutput {
	return o
}

func (o PrivilegesOutput) ToPrivilegesOutputWithContext(ctx context.Context) PrivilegesOutput {
	return o
}

func (o PrivilegesOutput) ToPrivilegesPtrOutput() PrivilegesPtrOutput {
	return o.ToPrivilegesPtrOutputWithContext(context.Background())
}

func (o PrivilegesOutput) ToPrivilegesPtrOutputWithContext(ctx context.Context) PrivilegesPtrOutput {
	return o.ApplyT(func(v Privileges) *Privileges {
		return &v
	}).(PrivilegesPtrOutput)
}

type PrivilegesPtrOutput struct {
	*pulumi.OutputState
}

func (PrivilegesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Privileges)(nil))
}

func (o PrivilegesPtrOutput) ToPrivilegesPtrOutput() PrivilegesPtrOutput {
	return o
}

func (o PrivilegesPtrOutput) ToPrivilegesPtrOutputWithContext(ctx context.Context) PrivilegesPtrOutput {
	return o
}

type PrivilegesArrayOutput struct{ *pulumi.OutputState }

func (PrivilegesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Privileges)(nil))
}

func (o PrivilegesArrayOutput) ToPrivilegesArrayOutput() PrivilegesArrayOutput {
	return o
}

func (o PrivilegesArrayOutput) ToPrivilegesArrayOutputWithContext(ctx context.Context) PrivilegesArrayOutput {
	return o
}

func (o PrivilegesArrayOutput) Index(i pulumi.IntInput) PrivilegesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Privileges {
		return vs[0].([]Privileges)[vs[1].(int)]
	}).(PrivilegesOutput)
}

type PrivilegesMapOutput struct{ *pulumi.OutputState }

func (PrivilegesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Privileges)(nil))
}

func (o PrivilegesMapOutput) ToPrivilegesMapOutput() PrivilegesMapOutput {
	return o
}

func (o PrivilegesMapOutput) ToPrivilegesMapOutputWithContext(ctx context.Context) PrivilegesMapOutput {
	return o
}

func (o PrivilegesMapOutput) MapIndex(k pulumi.StringInput) PrivilegesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Privileges {
		return vs[0].(map[string]Privileges)[vs[1].(string)]
	}).(PrivilegesOutput)
}

func init() {
	pulumi.RegisterOutputType(PrivilegesOutput{})
	pulumi.RegisterOutputType(PrivilegesPtrOutput{})
	pulumi.RegisterOutputType(PrivilegesArrayOutput{})
	pulumi.RegisterOutputType(PrivilegesMapOutput{})
}

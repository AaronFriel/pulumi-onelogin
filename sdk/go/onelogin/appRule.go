// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AppRule struct {
	pulumi.CustomResourceState

	Actions    AppRuleActionArrayOutput    `pulumi:"actions"`
	AppId      pulumi.StringOutput         `pulumi:"appId"`
	Conditions AppRuleConditionArrayOutput `pulumi:"conditions"`
	Enabled    pulumi.BoolPtrOutput        `pulumi:"enabled"`
	Match      pulumi.StringOutput         `pulumi:"match"`
	Name       pulumi.StringOutput         `pulumi:"name"`
	Position   pulumi.IntOutput            `pulumi:"position"`
}

// NewAppRule registers a new resource with the given unique name, arguments, and options.
func NewAppRule(ctx *pulumi.Context,
	name string, args *AppRuleArgs, opts ...pulumi.ResourceOption) (*AppRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	var resource AppRule
	err := ctx.RegisterResource("onelogin:index/appRule:AppRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppRule gets an existing AppRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppRuleState, opts ...pulumi.ResourceOption) (*AppRule, error) {
	var resource AppRule
	err := ctx.ReadResource("onelogin:index/appRule:AppRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppRule resources.
type appRuleState struct {
	Actions    []AppRuleAction    `pulumi:"actions"`
	AppId      *string            `pulumi:"appId"`
	Conditions []AppRuleCondition `pulumi:"conditions"`
	Enabled    *bool              `pulumi:"enabled"`
	Match      *string            `pulumi:"match"`
	Name       *string            `pulumi:"name"`
	Position   *int               `pulumi:"position"`
}

type AppRuleState struct {
	Actions    AppRuleActionArrayInput
	AppId      pulumi.StringPtrInput
	Conditions AppRuleConditionArrayInput
	Enabled    pulumi.BoolPtrInput
	Match      pulumi.StringPtrInput
	Name       pulumi.StringPtrInput
	Position   pulumi.IntPtrInput
}

func (AppRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*appRuleState)(nil)).Elem()
}

type appRuleArgs struct {
	Actions    []AppRuleAction    `pulumi:"actions"`
	AppId      string             `pulumi:"appId"`
	Conditions []AppRuleCondition `pulumi:"conditions"`
	Enabled    *bool              `pulumi:"enabled"`
	Match      string             `pulumi:"match"`
	Name       *string            `pulumi:"name"`
	Position   *int               `pulumi:"position"`
}

// The set of arguments for constructing a AppRule resource.
type AppRuleArgs struct {
	Actions    AppRuleActionArrayInput
	AppId      pulumi.StringInput
	Conditions AppRuleConditionArrayInput
	Enabled    pulumi.BoolPtrInput
	Match      pulumi.StringInput
	Name       pulumi.StringPtrInput
	Position   pulumi.IntPtrInput
}

func (AppRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appRuleArgs)(nil)).Elem()
}

type AppRuleInput interface {
	pulumi.Input

	ToAppRuleOutput() AppRuleOutput
	ToAppRuleOutputWithContext(ctx context.Context) AppRuleOutput
}

func (*AppRule) ElementType() reflect.Type {
	return reflect.TypeOf((*AppRule)(nil))
}

func (i *AppRule) ToAppRuleOutput() AppRuleOutput {
	return i.ToAppRuleOutputWithContext(context.Background())
}

func (i *AppRule) ToAppRuleOutputWithContext(ctx context.Context) AppRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRuleOutput)
}

func (i *AppRule) ToAppRulePtrOutput() AppRulePtrOutput {
	return i.ToAppRulePtrOutputWithContext(context.Background())
}

func (i *AppRule) ToAppRulePtrOutputWithContext(ctx context.Context) AppRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRulePtrOutput)
}

type AppRulePtrInput interface {
	pulumi.Input

	ToAppRulePtrOutput() AppRulePtrOutput
	ToAppRulePtrOutputWithContext(ctx context.Context) AppRulePtrOutput
}

type appRulePtrType AppRuleArgs

func (*appRulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AppRule)(nil))
}

func (i *appRulePtrType) ToAppRulePtrOutput() AppRulePtrOutput {
	return i.ToAppRulePtrOutputWithContext(context.Background())
}

func (i *appRulePtrType) ToAppRulePtrOutputWithContext(ctx context.Context) AppRulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRulePtrOutput)
}

// AppRuleArrayInput is an input type that accepts AppRuleArray and AppRuleArrayOutput values.
// You can construct a concrete instance of `AppRuleArrayInput` via:
//
//          AppRuleArray{ AppRuleArgs{...} }
type AppRuleArrayInput interface {
	pulumi.Input

	ToAppRuleArrayOutput() AppRuleArrayOutput
	ToAppRuleArrayOutputWithContext(context.Context) AppRuleArrayOutput
}

type AppRuleArray []AppRuleInput

func (AppRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*AppRule)(nil))
}

func (i AppRuleArray) ToAppRuleArrayOutput() AppRuleArrayOutput {
	return i.ToAppRuleArrayOutputWithContext(context.Background())
}

func (i AppRuleArray) ToAppRuleArrayOutputWithContext(ctx context.Context) AppRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRuleArrayOutput)
}

// AppRuleMapInput is an input type that accepts AppRuleMap and AppRuleMapOutput values.
// You can construct a concrete instance of `AppRuleMapInput` via:
//
//          AppRuleMap{ "key": AppRuleArgs{...} }
type AppRuleMapInput interface {
	pulumi.Input

	ToAppRuleMapOutput() AppRuleMapOutput
	ToAppRuleMapOutputWithContext(context.Context) AppRuleMapOutput
}

type AppRuleMap map[string]AppRuleInput

func (AppRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*AppRule)(nil))
}

func (i AppRuleMap) ToAppRuleMapOutput() AppRuleMapOutput {
	return i.ToAppRuleMapOutputWithContext(context.Background())
}

func (i AppRuleMap) ToAppRuleMapOutputWithContext(ctx context.Context) AppRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppRuleMapOutput)
}

type AppRuleOutput struct {
	*pulumi.OutputState
}

func (AppRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AppRule)(nil))
}

func (o AppRuleOutput) ToAppRuleOutput() AppRuleOutput {
	return o
}

func (o AppRuleOutput) ToAppRuleOutputWithContext(ctx context.Context) AppRuleOutput {
	return o
}

func (o AppRuleOutput) ToAppRulePtrOutput() AppRulePtrOutput {
	return o.ToAppRulePtrOutputWithContext(context.Background())
}

func (o AppRuleOutput) ToAppRulePtrOutputWithContext(ctx context.Context) AppRulePtrOutput {
	return o.ApplyT(func(v AppRule) *AppRule {
		return &v
	}).(AppRulePtrOutput)
}

type AppRulePtrOutput struct {
	*pulumi.OutputState
}

func (AppRulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppRule)(nil))
}

func (o AppRulePtrOutput) ToAppRulePtrOutput() AppRulePtrOutput {
	return o
}

func (o AppRulePtrOutput) ToAppRulePtrOutputWithContext(ctx context.Context) AppRulePtrOutput {
	return o
}

type AppRuleArrayOutput struct{ *pulumi.OutputState }

func (AppRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AppRule)(nil))
}

func (o AppRuleArrayOutput) ToAppRuleArrayOutput() AppRuleArrayOutput {
	return o
}

func (o AppRuleArrayOutput) ToAppRuleArrayOutputWithContext(ctx context.Context) AppRuleArrayOutput {
	return o
}

func (o AppRuleArrayOutput) Index(i pulumi.IntInput) AppRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AppRule {
		return vs[0].([]AppRule)[vs[1].(int)]
	}).(AppRuleOutput)
}

type AppRuleMapOutput struct{ *pulumi.OutputState }

func (AppRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AppRule)(nil))
}

func (o AppRuleMapOutput) ToAppRuleMapOutput() AppRuleMapOutput {
	return o
}

func (o AppRuleMapOutput) ToAppRuleMapOutputWithContext(ctx context.Context) AppRuleMapOutput {
	return o
}

func (o AppRuleMapOutput) MapIndex(k pulumi.StringInput) AppRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AppRule {
		return vs[0].(map[string]AppRule)[vs[1].(string)]
	}).(AppRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(AppRuleOutput{})
	pulumi.RegisterOutputType(AppRulePtrOutput{})
	pulumi.RegisterOutputType(AppRuleArrayOutput{})
	pulumi.RegisterOutputType(AppRuleMapOutput{})
}

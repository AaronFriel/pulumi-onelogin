// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SmartHooks struct {
	pulumi.CustomResourceState

	Conditions     SmartHooksConditionArrayOutput `pulumi:"conditions"`
	ContextVersion pulumi.StringOutput            `pulumi:"contextVersion"`
	CreatedAt      pulumi.StringOutput            `pulumi:"createdAt"`
	Disabled       pulumi.BoolOutput              `pulumi:"disabled"`
	EnvVars        pulumi.StringArrayOutput       `pulumi:"envVars"`
	Function       pulumi.StringOutput            `pulumi:"function"`
	Options        SmartHooksOptionsPtrOutput     `pulumi:"options"`
	Packages       pulumi.StringMapOutput         `pulumi:"packages"`
	Retries        pulumi.IntOutput               `pulumi:"retries"`
	Runtime        pulumi.StringOutput            `pulumi:"runtime"`
	Status         pulumi.StringOutput            `pulumi:"status"`
	Timeout        pulumi.IntOutput               `pulumi:"timeout"`
	Type           pulumi.StringOutput            `pulumi:"type"`
	UpdatedAt      pulumi.StringOutput            `pulumi:"updatedAt"`
}

// NewSmartHooks registers a new resource with the given unique name, arguments, and options.
func NewSmartHooks(ctx *pulumi.Context,
	name string, args *SmartHooksArgs, opts ...pulumi.ResourceOption) (*SmartHooks, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Disabled == nil {
		return nil, errors.New("invalid value for required argument 'Disabled'")
	}
	if args.EnvVars == nil {
		return nil, errors.New("invalid value for required argument 'EnvVars'")
	}
	if args.Function == nil {
		return nil, errors.New("invalid value for required argument 'Function'")
	}
	if args.Packages == nil {
		return nil, errors.New("invalid value for required argument 'Packages'")
	}
	if args.Retries == nil {
		return nil, errors.New("invalid value for required argument 'Retries'")
	}
	if args.Runtime == nil {
		return nil, errors.New("invalid value for required argument 'Runtime'")
	}
	if args.Timeout == nil {
		return nil, errors.New("invalid value for required argument 'Timeout'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource SmartHooks
	err := ctx.RegisterResource("onelogin:index/smartHooks:SmartHooks", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmartHooks gets an existing SmartHooks resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmartHooks(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmartHooksState, opts ...pulumi.ResourceOption) (*SmartHooks, error) {
	var resource SmartHooks
	err := ctx.ReadResource("onelogin:index/smartHooks:SmartHooks", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmartHooks resources.
type smartHooksState struct {
	Conditions     []SmartHooksCondition `pulumi:"conditions"`
	ContextVersion *string               `pulumi:"contextVersion"`
	CreatedAt      *string               `pulumi:"createdAt"`
	Disabled       *bool                 `pulumi:"disabled"`
	EnvVars        []string              `pulumi:"envVars"`
	Function       *string               `pulumi:"function"`
	Options        *SmartHooksOptions    `pulumi:"options"`
	Packages       map[string]string     `pulumi:"packages"`
	Retries        *int                  `pulumi:"retries"`
	Runtime        *string               `pulumi:"runtime"`
	Status         *string               `pulumi:"status"`
	Timeout        *int                  `pulumi:"timeout"`
	Type           *string               `pulumi:"type"`
	UpdatedAt      *string               `pulumi:"updatedAt"`
}

type SmartHooksState struct {
	Conditions     SmartHooksConditionArrayInput
	ContextVersion pulumi.StringPtrInput
	CreatedAt      pulumi.StringPtrInput
	Disabled       pulumi.BoolPtrInput
	EnvVars        pulumi.StringArrayInput
	Function       pulumi.StringPtrInput
	Options        SmartHooksOptionsPtrInput
	Packages       pulumi.StringMapInput
	Retries        pulumi.IntPtrInput
	Runtime        pulumi.StringPtrInput
	Status         pulumi.StringPtrInput
	Timeout        pulumi.IntPtrInput
	Type           pulumi.StringPtrInput
	UpdatedAt      pulumi.StringPtrInput
}

func (SmartHooksState) ElementType() reflect.Type {
	return reflect.TypeOf((*smartHooksState)(nil)).Elem()
}

type smartHooksArgs struct {
	Conditions     []SmartHooksCondition `pulumi:"conditions"`
	ContextVersion *string               `pulumi:"contextVersion"`
	Disabled       bool                  `pulumi:"disabled"`
	EnvVars        []string              `pulumi:"envVars"`
	Function       string                `pulumi:"function"`
	Options        *SmartHooksOptions    `pulumi:"options"`
	Packages       map[string]string     `pulumi:"packages"`
	Retries        int                   `pulumi:"retries"`
	Runtime        string                `pulumi:"runtime"`
	Timeout        int                   `pulumi:"timeout"`
	Type           string                `pulumi:"type"`
}

// The set of arguments for constructing a SmartHooks resource.
type SmartHooksArgs struct {
	Conditions     SmartHooksConditionArrayInput
	ContextVersion pulumi.StringPtrInput
	Disabled       pulumi.BoolInput
	EnvVars        pulumi.StringArrayInput
	Function       pulumi.StringInput
	Options        SmartHooksOptionsPtrInput
	Packages       pulumi.StringMapInput
	Retries        pulumi.IntInput
	Runtime        pulumi.StringInput
	Timeout        pulumi.IntInput
	Type           pulumi.StringInput
}

func (SmartHooksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smartHooksArgs)(nil)).Elem()
}

type SmartHooksInput interface {
	pulumi.Input

	ToSmartHooksOutput() SmartHooksOutput
	ToSmartHooksOutputWithContext(ctx context.Context) SmartHooksOutput
}

func (*SmartHooks) ElementType() reflect.Type {
	return reflect.TypeOf((*SmartHooks)(nil))
}

func (i *SmartHooks) ToSmartHooksOutput() SmartHooksOutput {
	return i.ToSmartHooksOutputWithContext(context.Background())
}

func (i *SmartHooks) ToSmartHooksOutputWithContext(ctx context.Context) SmartHooksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartHooksOutput)
}

func (i *SmartHooks) ToSmartHooksPtrOutput() SmartHooksPtrOutput {
	return i.ToSmartHooksPtrOutputWithContext(context.Background())
}

func (i *SmartHooks) ToSmartHooksPtrOutputWithContext(ctx context.Context) SmartHooksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartHooksPtrOutput)
}

type SmartHooksPtrInput interface {
	pulumi.Input

	ToSmartHooksPtrOutput() SmartHooksPtrOutput
	ToSmartHooksPtrOutputWithContext(ctx context.Context) SmartHooksPtrOutput
}

type smartHooksPtrType SmartHooksArgs

func (*smartHooksPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SmartHooks)(nil))
}

func (i *smartHooksPtrType) ToSmartHooksPtrOutput() SmartHooksPtrOutput {
	return i.ToSmartHooksPtrOutputWithContext(context.Background())
}

func (i *smartHooksPtrType) ToSmartHooksPtrOutputWithContext(ctx context.Context) SmartHooksPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartHooksPtrOutput)
}

// SmartHooksArrayInput is an input type that accepts SmartHooksArray and SmartHooksArrayOutput values.
// You can construct a concrete instance of `SmartHooksArrayInput` via:
//
//          SmartHooksArray{ SmartHooksArgs{...} }
type SmartHooksArrayInput interface {
	pulumi.Input

	ToSmartHooksArrayOutput() SmartHooksArrayOutput
	ToSmartHooksArrayOutputWithContext(context.Context) SmartHooksArrayOutput
}

type SmartHooksArray []SmartHooksInput

func (SmartHooksArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SmartHooks)(nil))
}

func (i SmartHooksArray) ToSmartHooksArrayOutput() SmartHooksArrayOutput {
	return i.ToSmartHooksArrayOutputWithContext(context.Background())
}

func (i SmartHooksArray) ToSmartHooksArrayOutputWithContext(ctx context.Context) SmartHooksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartHooksArrayOutput)
}

// SmartHooksMapInput is an input type that accepts SmartHooksMap and SmartHooksMapOutput values.
// You can construct a concrete instance of `SmartHooksMapInput` via:
//
//          SmartHooksMap{ "key": SmartHooksArgs{...} }
type SmartHooksMapInput interface {
	pulumi.Input

	ToSmartHooksMapOutput() SmartHooksMapOutput
	ToSmartHooksMapOutputWithContext(context.Context) SmartHooksMapOutput
}

type SmartHooksMap map[string]SmartHooksInput

func (SmartHooksMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SmartHooks)(nil))
}

func (i SmartHooksMap) ToSmartHooksMapOutput() SmartHooksMapOutput {
	return i.ToSmartHooksMapOutputWithContext(context.Background())
}

func (i SmartHooksMap) ToSmartHooksMapOutputWithContext(ctx context.Context) SmartHooksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartHooksMapOutput)
}

type SmartHooksOutput struct {
	*pulumi.OutputState
}

func (SmartHooksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SmartHooks)(nil))
}

func (o SmartHooksOutput) ToSmartHooksOutput() SmartHooksOutput {
	return o
}

func (o SmartHooksOutput) ToSmartHooksOutputWithContext(ctx context.Context) SmartHooksOutput {
	return o
}

func (o SmartHooksOutput) ToSmartHooksPtrOutput() SmartHooksPtrOutput {
	return o.ToSmartHooksPtrOutputWithContext(context.Background())
}

func (o SmartHooksOutput) ToSmartHooksPtrOutputWithContext(ctx context.Context) SmartHooksPtrOutput {
	return o.ApplyT(func(v SmartHooks) *SmartHooks {
		return &v
	}).(SmartHooksPtrOutput)
}

type SmartHooksPtrOutput struct {
	*pulumi.OutputState
}

func (SmartHooksPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmartHooks)(nil))
}

func (o SmartHooksPtrOutput) ToSmartHooksPtrOutput() SmartHooksPtrOutput {
	return o
}

func (o SmartHooksPtrOutput) ToSmartHooksPtrOutputWithContext(ctx context.Context) SmartHooksPtrOutput {
	return o
}

type SmartHooksArrayOutput struct{ *pulumi.OutputState }

func (SmartHooksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SmartHooks)(nil))
}

func (o SmartHooksArrayOutput) ToSmartHooksArrayOutput() SmartHooksArrayOutput {
	return o
}

func (o SmartHooksArrayOutput) ToSmartHooksArrayOutputWithContext(ctx context.Context) SmartHooksArrayOutput {
	return o
}

func (o SmartHooksArrayOutput) Index(i pulumi.IntInput) SmartHooksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SmartHooks {
		return vs[0].([]SmartHooks)[vs[1].(int)]
	}).(SmartHooksOutput)
}

type SmartHooksMapOutput struct{ *pulumi.OutputState }

func (SmartHooksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SmartHooks)(nil))
}

func (o SmartHooksMapOutput) ToSmartHooksMapOutput() SmartHooksMapOutput {
	return o
}

func (o SmartHooksMapOutput) ToSmartHooksMapOutputWithContext(ctx context.Context) SmartHooksMapOutput {
	return o
}

func (o SmartHooksMapOutput) MapIndex(k pulumi.StringInput) SmartHooksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SmartHooks {
		return vs[0].(map[string]SmartHooks)[vs[1].(string)]
	}).(SmartHooksOutput)
}

func init() {
	pulumi.RegisterOutputType(SmartHooksOutput{})
	pulumi.RegisterOutputType(SmartHooksPtrOutput{})
	pulumi.RegisterOutputType(SmartHooksArrayOutput{})
	pulumi.RegisterOutputType(SmartHooksMapOutput{})
}

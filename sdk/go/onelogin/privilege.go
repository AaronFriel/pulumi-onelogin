// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Privilege struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput        `pulumi:"description"`
	Name        pulumi.StringOutput           `pulumi:"name"`
	Privileges  PrivilegePrivilegeArrayOutput `pulumi:"privileges"`
	RoleIds     pulumi.IntArrayOutput         `pulumi:"roleIds"`
	UserIds     pulumi.IntArrayOutput         `pulumi:"userIds"`
}

// NewPrivilege registers a new resource with the given unique name, arguments, and options.
func NewPrivilege(ctx *pulumi.Context,
	name string, args *PrivilegeArgs, opts ...pulumi.ResourceOption) (*Privilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Privileges == nil {
		return nil, errors.New("invalid value for required argument 'Privileges'")
	}
	var resource Privilege
	err := ctx.RegisterResource("onelogin:index/privilege:Privilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivilege gets an existing Privilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivilegeState, opts ...pulumi.ResourceOption) (*Privilege, error) {
	var resource Privilege
	err := ctx.ReadResource("onelogin:index/privilege:Privilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Privilege resources.
type privilegeState struct {
	Description *string              `pulumi:"description"`
	Name        *string              `pulumi:"name"`
	Privileges  []PrivilegePrivilege `pulumi:"privileges"`
	RoleIds     []int                `pulumi:"roleIds"`
	UserIds     []int                `pulumi:"userIds"`
}

type PrivilegeState struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Privileges  PrivilegePrivilegeArrayInput
	RoleIds     pulumi.IntArrayInput
	UserIds     pulumi.IntArrayInput
}

func (PrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegeState)(nil)).Elem()
}

type privilegeArgs struct {
	Description *string              `pulumi:"description"`
	Name        *string              `pulumi:"name"`
	Privileges  []PrivilegePrivilege `pulumi:"privileges"`
	RoleIds     []int                `pulumi:"roleIds"`
	UserIds     []int                `pulumi:"userIds"`
}

// The set of arguments for constructing a Privilege resource.
type PrivilegeArgs struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Privileges  PrivilegePrivilegeArrayInput
	RoleIds     pulumi.IntArrayInput
	UserIds     pulumi.IntArrayInput
}

func (PrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegeArgs)(nil)).Elem()
}

type PrivilegeInput interface {
	pulumi.Input

	ToPrivilegeOutput() PrivilegeOutput
	ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput
}

func (*Privilege) ElementType() reflect.Type {
	return reflect.TypeOf((*Privilege)(nil))
}

func (i *Privilege) ToPrivilegeOutput() PrivilegeOutput {
	return i.ToPrivilegeOutputWithContext(context.Background())
}

func (i *Privilege) ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeOutput)
}

func (i *Privilege) ToPrivilegePtrOutput() PrivilegePtrOutput {
	return i.ToPrivilegePtrOutputWithContext(context.Background())
}

func (i *Privilege) ToPrivilegePtrOutputWithContext(ctx context.Context) PrivilegePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegePtrOutput)
}

type PrivilegePtrInput interface {
	pulumi.Input

	ToPrivilegePtrOutput() PrivilegePtrOutput
	ToPrivilegePtrOutputWithContext(ctx context.Context) PrivilegePtrOutput
}

type privilegePtrType PrivilegeArgs

func (*privilegePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Privilege)(nil))
}

func (i *privilegePtrType) ToPrivilegePtrOutput() PrivilegePtrOutput {
	return i.ToPrivilegePtrOutputWithContext(context.Background())
}

func (i *privilegePtrType) ToPrivilegePtrOutputWithContext(ctx context.Context) PrivilegePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegePtrOutput)
}

// PrivilegeArrayInput is an input type that accepts PrivilegeArray and PrivilegeArrayOutput values.
// You can construct a concrete instance of `PrivilegeArrayInput` via:
//
//          PrivilegeArray{ PrivilegeArgs{...} }
type PrivilegeArrayInput interface {
	pulumi.Input

	ToPrivilegeArrayOutput() PrivilegeArrayOutput
	ToPrivilegeArrayOutputWithContext(context.Context) PrivilegeArrayOutput
}

type PrivilegeArray []PrivilegeInput

func (PrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Privilege)(nil))
}

func (i PrivilegeArray) ToPrivilegeArrayOutput() PrivilegeArrayOutput {
	return i.ToPrivilegeArrayOutputWithContext(context.Background())
}

func (i PrivilegeArray) ToPrivilegeArrayOutputWithContext(ctx context.Context) PrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeArrayOutput)
}

// PrivilegeMapInput is an input type that accepts PrivilegeMap and PrivilegeMapOutput values.
// You can construct a concrete instance of `PrivilegeMapInput` via:
//
//          PrivilegeMap{ "key": PrivilegeArgs{...} }
type PrivilegeMapInput interface {
	pulumi.Input

	ToPrivilegeMapOutput() PrivilegeMapOutput
	ToPrivilegeMapOutputWithContext(context.Context) PrivilegeMapOutput
}

type PrivilegeMap map[string]PrivilegeInput

func (PrivilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Privilege)(nil))
}

func (i PrivilegeMap) ToPrivilegeMapOutput() PrivilegeMapOutput {
	return i.ToPrivilegeMapOutputWithContext(context.Background())
}

func (i PrivilegeMap) ToPrivilegeMapOutputWithContext(ctx context.Context) PrivilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeMapOutput)
}

type PrivilegeOutput struct {
	*pulumi.OutputState
}

func (PrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Privilege)(nil))
}

func (o PrivilegeOutput) ToPrivilegeOutput() PrivilegeOutput {
	return o
}

func (o PrivilegeOutput) ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput {
	return o
}

func (o PrivilegeOutput) ToPrivilegePtrOutput() PrivilegePtrOutput {
	return o.ToPrivilegePtrOutputWithContext(context.Background())
}

func (o PrivilegeOutput) ToPrivilegePtrOutputWithContext(ctx context.Context) PrivilegePtrOutput {
	return o.ApplyT(func(v Privilege) *Privilege {
		return &v
	}).(PrivilegePtrOutput)
}

type PrivilegePtrOutput struct {
	*pulumi.OutputState
}

func (PrivilegePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Privilege)(nil))
}

func (o PrivilegePtrOutput) ToPrivilegePtrOutput() PrivilegePtrOutput {
	return o
}

func (o PrivilegePtrOutput) ToPrivilegePtrOutputWithContext(ctx context.Context) PrivilegePtrOutput {
	return o
}

type PrivilegeArrayOutput struct{ *pulumi.OutputState }

func (PrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Privilege)(nil))
}

func (o PrivilegeArrayOutput) ToPrivilegeArrayOutput() PrivilegeArrayOutput {
	return o
}

func (o PrivilegeArrayOutput) ToPrivilegeArrayOutputWithContext(ctx context.Context) PrivilegeArrayOutput {
	return o
}

func (o PrivilegeArrayOutput) Index(i pulumi.IntInput) PrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Privilege {
		return vs[0].([]Privilege)[vs[1].(int)]
	}).(PrivilegeOutput)
}

type PrivilegeMapOutput struct{ *pulumi.OutputState }

func (PrivilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Privilege)(nil))
}

func (o PrivilegeMapOutput) ToPrivilegeMapOutput() PrivilegeMapOutput {
	return o
}

func (o PrivilegeMapOutput) ToPrivilegeMapOutputWithContext(ctx context.Context) PrivilegeMapOutput {
	return o
}

func (o PrivilegeMapOutput) MapIndex(k pulumi.StringInput) PrivilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Privilege {
		return vs[0].(map[string]Privilege)[vs[1].(string)]
	}).(PrivilegeOutput)
}

func init() {
	pulumi.RegisterOutputType(PrivilegeOutput{})
	pulumi.RegisterOutputType(PrivilegePtrOutput{})
	pulumi.RegisterOutputType(PrivilegeArrayOutput{})
	pulumi.RegisterOutputType(PrivilegeMapOutput{})
}

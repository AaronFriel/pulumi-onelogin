// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package onelogin

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type SamlApp struct {
	pulumi.CustomResourceState

	AllowAssumedSignin pulumi.BoolPtrOutput        `pulumi:"allowAssumedSignin"`
	AuthMethod         pulumi.IntOutput            `pulumi:"authMethod"`
	BrandId            pulumi.IntPtrOutput         `pulumi:"brandId"`
	Certificate        pulumi.StringMapOutput      `pulumi:"certificate"`
	Configuration      pulumi.StringMapOutput      `pulumi:"configuration"`
	ConnectorId        pulumi.IntOutput            `pulumi:"connectorId"`
	CreatedAt          pulumi.StringOutput         `pulumi:"createdAt"`
	Description        pulumi.StringPtrOutput      `pulumi:"description"`
	IconUrl            pulumi.StringOutput         `pulumi:"iconUrl"`
	Name               pulumi.StringOutput         `pulumi:"name"`
	Notes              pulumi.StringPtrOutput      `pulumi:"notes"`
	Parameters         SamlAppParameterArrayOutput `pulumi:"parameters"`
	PolicyId           pulumi.IntOutput            `pulumi:"policyId"`
	Provisioning       pulumi.BoolMapOutput        `pulumi:"provisioning"`
	Sso                pulumi.StringMapOutput      `pulumi:"sso"`
	TabId              pulumi.IntOutput            `pulumi:"tabId"`
	UpdatedAt          pulumi.StringOutput         `pulumi:"updatedAt"`
	Visible            pulumi.BoolPtrOutput        `pulumi:"visible"`
}

// NewSamlApp registers a new resource with the given unique name, arguments, and options.
func NewSamlApp(ctx *pulumi.Context,
	name string, args *SamlAppArgs, opts ...pulumi.ResourceOption) (*SamlApp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ConnectorId'")
	}
	var resource SamlApp
	err := ctx.RegisterResource("onelogin:index/samlApp:SamlApp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSamlApp gets an existing SamlApp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSamlApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SamlAppState, opts ...pulumi.ResourceOption) (*SamlApp, error) {
	var resource SamlApp
	err := ctx.ReadResource("onelogin:index/samlApp:SamlApp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SamlApp resources.
type samlAppState struct {
	AllowAssumedSignin *bool              `pulumi:"allowAssumedSignin"`
	AuthMethod         *int               `pulumi:"authMethod"`
	BrandId            *int               `pulumi:"brandId"`
	Certificate        map[string]string  `pulumi:"certificate"`
	Configuration      map[string]string  `pulumi:"configuration"`
	ConnectorId        *int               `pulumi:"connectorId"`
	CreatedAt          *string            `pulumi:"createdAt"`
	Description        *string            `pulumi:"description"`
	IconUrl            *string            `pulumi:"iconUrl"`
	Name               *string            `pulumi:"name"`
	Notes              *string            `pulumi:"notes"`
	Parameters         []SamlAppParameter `pulumi:"parameters"`
	PolicyId           *int               `pulumi:"policyId"`
	Provisioning       map[string]bool    `pulumi:"provisioning"`
	Sso                map[string]string  `pulumi:"sso"`
	TabId              *int               `pulumi:"tabId"`
	UpdatedAt          *string            `pulumi:"updatedAt"`
	Visible            *bool              `pulumi:"visible"`
}

type SamlAppState struct {
	AllowAssumedSignin pulumi.BoolPtrInput
	AuthMethod         pulumi.IntPtrInput
	BrandId            pulumi.IntPtrInput
	Certificate        pulumi.StringMapInput
	Configuration      pulumi.StringMapInput
	ConnectorId        pulumi.IntPtrInput
	CreatedAt          pulumi.StringPtrInput
	Description        pulumi.StringPtrInput
	IconUrl            pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	Notes              pulumi.StringPtrInput
	Parameters         SamlAppParameterArrayInput
	PolicyId           pulumi.IntPtrInput
	Provisioning       pulumi.BoolMapInput
	Sso                pulumi.StringMapInput
	TabId              pulumi.IntPtrInput
	UpdatedAt          pulumi.StringPtrInput
	Visible            pulumi.BoolPtrInput
}

func (SamlAppState) ElementType() reflect.Type {
	return reflect.TypeOf((*samlAppState)(nil)).Elem()
}

type samlAppArgs struct {
	AllowAssumedSignin *bool              `pulumi:"allowAssumedSignin"`
	BrandId            *int               `pulumi:"brandId"`
	Configuration      map[string]string  `pulumi:"configuration"`
	ConnectorId        int                `pulumi:"connectorId"`
	Description        *string            `pulumi:"description"`
	Name               *string            `pulumi:"name"`
	Notes              *string            `pulumi:"notes"`
	Parameters         []SamlAppParameter `pulumi:"parameters"`
	Provisioning       map[string]bool    `pulumi:"provisioning"`
	Visible            *bool              `pulumi:"visible"`
}

// The set of arguments for constructing a SamlApp resource.
type SamlAppArgs struct {
	AllowAssumedSignin pulumi.BoolPtrInput
	BrandId            pulumi.IntPtrInput
	Configuration      pulumi.StringMapInput
	ConnectorId        pulumi.IntInput
	Description        pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	Notes              pulumi.StringPtrInput
	Parameters         SamlAppParameterArrayInput
	Provisioning       pulumi.BoolMapInput
	Visible            pulumi.BoolPtrInput
}

func (SamlAppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*samlAppArgs)(nil)).Elem()
}

type SamlAppInput interface {
	pulumi.Input

	ToSamlAppOutput() SamlAppOutput
	ToSamlAppOutputWithContext(ctx context.Context) SamlAppOutput
}

func (*SamlApp) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlApp)(nil))
}

func (i *SamlApp) ToSamlAppOutput() SamlAppOutput {
	return i.ToSamlAppOutputWithContext(context.Background())
}

func (i *SamlApp) ToSamlAppOutputWithContext(ctx context.Context) SamlAppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAppOutput)
}

func (i *SamlApp) ToSamlAppPtrOutput() SamlAppPtrOutput {
	return i.ToSamlAppPtrOutputWithContext(context.Background())
}

func (i *SamlApp) ToSamlAppPtrOutputWithContext(ctx context.Context) SamlAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAppPtrOutput)
}

type SamlAppPtrInput interface {
	pulumi.Input

	ToSamlAppPtrOutput() SamlAppPtrOutput
	ToSamlAppPtrOutputWithContext(ctx context.Context) SamlAppPtrOutput
}

type samlAppPtrType SamlAppArgs

func (*samlAppPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlApp)(nil))
}

func (i *samlAppPtrType) ToSamlAppPtrOutput() SamlAppPtrOutput {
	return i.ToSamlAppPtrOutputWithContext(context.Background())
}

func (i *samlAppPtrType) ToSamlAppPtrOutputWithContext(ctx context.Context) SamlAppPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAppPtrOutput)
}

// SamlAppArrayInput is an input type that accepts SamlAppArray and SamlAppArrayOutput values.
// You can construct a concrete instance of `SamlAppArrayInput` via:
//
//          SamlAppArray{ SamlAppArgs{...} }
type SamlAppArrayInput interface {
	pulumi.Input

	ToSamlAppArrayOutput() SamlAppArrayOutput
	ToSamlAppArrayOutputWithContext(context.Context) SamlAppArrayOutput
}

type SamlAppArray []SamlAppInput

func (SamlAppArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SamlApp)(nil))
}

func (i SamlAppArray) ToSamlAppArrayOutput() SamlAppArrayOutput {
	return i.ToSamlAppArrayOutputWithContext(context.Background())
}

func (i SamlAppArray) ToSamlAppArrayOutputWithContext(ctx context.Context) SamlAppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAppArrayOutput)
}

// SamlAppMapInput is an input type that accepts SamlAppMap and SamlAppMapOutput values.
// You can construct a concrete instance of `SamlAppMapInput` via:
//
//          SamlAppMap{ "key": SamlAppArgs{...} }
type SamlAppMapInput interface {
	pulumi.Input

	ToSamlAppMapOutput() SamlAppMapOutput
	ToSamlAppMapOutputWithContext(context.Context) SamlAppMapOutput
}

type SamlAppMap map[string]SamlAppInput

func (SamlAppMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SamlApp)(nil))
}

func (i SamlAppMap) ToSamlAppMapOutput() SamlAppMapOutput {
	return i.ToSamlAppMapOutputWithContext(context.Background())
}

func (i SamlAppMap) ToSamlAppMapOutputWithContext(ctx context.Context) SamlAppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SamlAppMapOutput)
}

type SamlAppOutput struct {
	*pulumi.OutputState
}

func (SamlAppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SamlApp)(nil))
}

func (o SamlAppOutput) ToSamlAppOutput() SamlAppOutput {
	return o
}

func (o SamlAppOutput) ToSamlAppOutputWithContext(ctx context.Context) SamlAppOutput {
	return o
}

func (o SamlAppOutput) ToSamlAppPtrOutput() SamlAppPtrOutput {
	return o.ToSamlAppPtrOutputWithContext(context.Background())
}

func (o SamlAppOutput) ToSamlAppPtrOutputWithContext(ctx context.Context) SamlAppPtrOutput {
	return o.ApplyT(func(v SamlApp) *SamlApp {
		return &v
	}).(SamlAppPtrOutput)
}

type SamlAppPtrOutput struct {
	*pulumi.OutputState
}

func (SamlAppPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SamlApp)(nil))
}

func (o SamlAppPtrOutput) ToSamlAppPtrOutput() SamlAppPtrOutput {
	return o
}

func (o SamlAppPtrOutput) ToSamlAppPtrOutputWithContext(ctx context.Context) SamlAppPtrOutput {
	return o
}

type SamlAppArrayOutput struct{ *pulumi.OutputState }

func (SamlAppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SamlApp)(nil))
}

func (o SamlAppArrayOutput) ToSamlAppArrayOutput() SamlAppArrayOutput {
	return o
}

func (o SamlAppArrayOutput) ToSamlAppArrayOutputWithContext(ctx context.Context) SamlAppArrayOutput {
	return o
}

func (o SamlAppArrayOutput) Index(i pulumi.IntInput) SamlAppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SamlApp {
		return vs[0].([]SamlApp)[vs[1].(int)]
	}).(SamlAppOutput)
}

type SamlAppMapOutput struct{ *pulumi.OutputState }

func (SamlAppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SamlApp)(nil))
}

func (o SamlAppMapOutput) ToSamlAppMapOutput() SamlAppMapOutput {
	return o
}

func (o SamlAppMapOutput) ToSamlAppMapOutputWithContext(ctx context.Context) SamlAppMapOutput {
	return o
}

func (o SamlAppMapOutput) MapIndex(k pulumi.StringInput) SamlAppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SamlApp {
		return vs[0].(map[string]SamlApp)[vs[1].(string)]
	}).(SamlAppOutput)
}

func init() {
	pulumi.RegisterOutputType(SamlAppOutput{})
	pulumi.RegisterOutputType(SamlAppPtrOutput{})
	pulumi.RegisterOutputType(SamlAppArrayOutput{})
	pulumi.RegisterOutputType(SamlAppMapOutput{})
}
